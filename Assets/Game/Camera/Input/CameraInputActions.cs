//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Game/Camera/Input/CameraInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInputActions"",
    ""maps"": [
        {
            ""name"": ""CameraMap"",
            ""id"": ""c7a800ca-dd8f-4905-bf39-2a4d0d467106"",
            ""actions"": [
                {
                    ""name"": ""ChangeDirection"",
                    ""type"": ""Button"",
                    ""id"": ""a2db557c-98e1-4d43-a4a7-0ce825b61f5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.25)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleDirectionChange"",
                    ""type"": ""Button"",
                    ""id"": ""2fea518c-2423-4789-a0da-41c6c73ff823"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimInput"",
                    ""type"": ""Value"",
                    ""id"": ""4ef97ef4-a9f4-4d86-be39-13ba4b8b0bcd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58ae411d-33d2-4a5d-a552-ed22fe64fd25"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""863af0a9-a9e4-4f66-ad20-4df6527a24a6"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd712785-4e00-45ad-bc2c-fc1b2bbe3a03"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDirectionChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8760bb1-d16d-4954-8dfe-3943b65272a5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDirectionChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""84aabe6c-7f89-4c67-bc20-63e23754c39f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f311336-5509-4950-898f-c330e0852da1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3affcba4-b1d7-4569-b698-f6ba984e680e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb5ffdc7-a9b0-4db0-9cc5-9d3922b69b4d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""552b12ff-aa98-410d-9d0c-8d5ee08bd863"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1e287f59-5bea-4fee-b58e-ebb93c92be45"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraMap
        m_CameraMap = asset.FindActionMap("CameraMap", throwIfNotFound: true);
        m_CameraMap_ChangeDirection = m_CameraMap.FindAction("ChangeDirection", throwIfNotFound: true);
        m_CameraMap_ToggleDirectionChange = m_CameraMap.FindAction("ToggleDirectionChange", throwIfNotFound: true);
        m_CameraMap_AimInput = m_CameraMap.FindAction("AimInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMap
    private readonly InputActionMap m_CameraMap;
    private List<ICameraMapActions> m_CameraMapActionsCallbackInterfaces = new List<ICameraMapActions>();
    private readonly InputAction m_CameraMap_ChangeDirection;
    private readonly InputAction m_CameraMap_ToggleDirectionChange;
    private readonly InputAction m_CameraMap_AimInput;
    public struct CameraMapActions
    {
        private @CameraInputActions m_Wrapper;
        public CameraMapActions(@CameraInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeDirection => m_Wrapper.m_CameraMap_ChangeDirection;
        public InputAction @ToggleDirectionChange => m_Wrapper.m_CameraMap_ToggleDirectionChange;
        public InputAction @AimInput => m_Wrapper.m_CameraMap_AimInput;
        public InputActionMap Get() { return m_Wrapper.m_CameraMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMapActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMapActionsCallbackInterfaces.Add(instance);
            @ChangeDirection.started += instance.OnChangeDirection;
            @ChangeDirection.performed += instance.OnChangeDirection;
            @ChangeDirection.canceled += instance.OnChangeDirection;
            @ToggleDirectionChange.started += instance.OnToggleDirectionChange;
            @ToggleDirectionChange.performed += instance.OnToggleDirectionChange;
            @ToggleDirectionChange.canceled += instance.OnToggleDirectionChange;
            @AimInput.started += instance.OnAimInput;
            @AimInput.performed += instance.OnAimInput;
            @AimInput.canceled += instance.OnAimInput;
        }

        private void UnregisterCallbacks(ICameraMapActions instance)
        {
            @ChangeDirection.started -= instance.OnChangeDirection;
            @ChangeDirection.performed -= instance.OnChangeDirection;
            @ChangeDirection.canceled -= instance.OnChangeDirection;
            @ToggleDirectionChange.started -= instance.OnToggleDirectionChange;
            @ToggleDirectionChange.performed -= instance.OnToggleDirectionChange;
            @ToggleDirectionChange.canceled -= instance.OnToggleDirectionChange;
            @AimInput.started -= instance.OnAimInput;
            @AimInput.performed -= instance.OnAimInput;
            @AimInput.canceled -= instance.OnAimInput;
        }

        public void RemoveCallbacks(ICameraMapActions instance)
        {
            if (m_Wrapper.m_CameraMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMapActions @CameraMap => new CameraMapActions(this);
    public interface ICameraMapActions
    {
        void OnChangeDirection(InputAction.CallbackContext context);
        void OnToggleDirectionChange(InputAction.CallbackContext context);
        void OnAimInput(InputAction.CallbackContext context);
    }
}
